package eu.jangos.realm.model.world;
// Generated 06-mai-2016 21:17:32 by Hibernate Tools 4.3.1


import java.util.HashSet;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * Spellspelleffects generated by hbm2java
 */
@Entity
@Table(name="spellspelleffects"
    ,catalog="jangosworld"
)
public class Spellspelleffects  implements java.io.Serializable {


     private SpellspelleffectsId id;
     private Spellauras spellauras;
     private Spelleffects spelleffects;
     private Spellmechanic spellmechanic;
     private Spellradius spellradius;
     private Spells spellsByFkTriggeredspell;
     private Spells spellsByFkSpell;
     private Targets targetsByFkTargetA;
     private Targets targetsByFkTargetB;
     private Integer dieSide;
     private Integer basePoint;
     private Integer baseDice;
     private Integer dicePerLevel;
     private Integer realPointsPerLevel;
     private Integer pointPerCombo;
     private Long amplitude;
     private Long multiple;
     private Byte chainTarget;
     private Integer miscValue;
     private Integer multiplier;
     private Set<Spells> spellses = new HashSet<Spells>(0);

    public Spellspelleffects() {
    }

	
    public Spellspelleffects(SpellspelleffectsId id, Spelleffects spelleffects, Spells spellsByFkSpell) {
        this.id = id;
        this.spelleffects = spelleffects;
        this.spellsByFkSpell = spellsByFkSpell;
    }
    public Spellspelleffects(SpellspelleffectsId id, Spellauras spellauras, Spelleffects spelleffects, Spellmechanic spellmechanic, Spellradius spellradius, Spells spellsByFkTriggeredspell, Spells spellsByFkSpell, Targets targetsByFkTargetA, Targets targetsByFkTargetB, Integer dieSide, Integer basePoint, Integer baseDice, Integer dicePerLevel, Integer realPointsPerLevel, Integer pointPerCombo, Long amplitude, Long multiple, Byte chainTarget, Integer miscValue, Integer multiplier, Set<Spells> spellses) {
       this.id = id;
       this.spellauras = spellauras;
       this.spelleffects = spelleffects;
       this.spellmechanic = spellmechanic;
       this.spellradius = spellradius;
       this.spellsByFkTriggeredspell = spellsByFkTriggeredspell;
       this.spellsByFkSpell = spellsByFkSpell;
       this.targetsByFkTargetA = targetsByFkTargetA;
       this.targetsByFkTargetB = targetsByFkTargetB;
       this.dieSide = dieSide;
       this.basePoint = basePoint;
       this.baseDice = baseDice;
       this.dicePerLevel = dicePerLevel;
       this.realPointsPerLevel = realPointsPerLevel;
       this.pointPerCombo = pointPerCombo;
       this.amplitude = amplitude;
       this.multiple = multiple;
       this.chainTarget = chainTarget;
       this.miscValue = miscValue;
       this.multiplier = multiplier;
       this.spellses = spellses;
    }
   
     @EmbeddedId

    
    @AttributeOverrides( {
        @AttributeOverride(name="fkSpell", column=@Column(name="fk_spell", nullable=false) ), 
        @AttributeOverride(name="fkEffect", column=@Column(name="fk_effect", nullable=false) ), 
        @AttributeOverride(name="sequence", column=@Column(name="sequence", nullable=false) ) } )
    public SpellspelleffectsId getId() {
        return this.id;
    }
    
    public void setId(SpellspelleffectsId id) {
        this.id = id;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="fk_spellaura")
    public Spellauras getSpellauras() {
        return this.spellauras;
    }
    
    public void setSpellauras(Spellauras spellauras) {
        this.spellauras = spellauras;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="fk_effect", nullable=false, insertable=false, updatable=false)
    public Spelleffects getSpelleffects() {
        return this.spelleffects;
    }
    
    public void setSpelleffects(Spelleffects spelleffects) {
        this.spelleffects = spelleffects;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="fk_spellmechanic")
    public Spellmechanic getSpellmechanic() {
        return this.spellmechanic;
    }
    
    public void setSpellmechanic(Spellmechanic spellmechanic) {
        this.spellmechanic = spellmechanic;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="fk_spellradius")
    public Spellradius getSpellradius() {
        return this.spellradius;
    }
    
    public void setSpellradius(Spellradius spellradius) {
        this.spellradius = spellradius;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="fk_triggeredspell")
    public Spells getSpellsByFkTriggeredspell() {
        return this.spellsByFkTriggeredspell;
    }
    
    public void setSpellsByFkTriggeredspell(Spells spellsByFkTriggeredspell) {
        this.spellsByFkTriggeredspell = spellsByFkTriggeredspell;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="fk_spell", nullable=false, insertable=false, updatable=false)
    public Spells getSpellsByFkSpell() {
        return this.spellsByFkSpell;
    }
    
    public void setSpellsByFkSpell(Spells spellsByFkSpell) {
        this.spellsByFkSpell = spellsByFkSpell;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="fk_targetA")
    public Targets getTargetsByFkTargetA() {
        return this.targetsByFkTargetA;
    }
    
    public void setTargetsByFkTargetA(Targets targetsByFkTargetA) {
        this.targetsByFkTargetA = targetsByFkTargetA;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="fk_targetB")
    public Targets getTargetsByFkTargetB() {
        return this.targetsByFkTargetB;
    }
    
    public void setTargetsByFkTargetB(Targets targetsByFkTargetB) {
        this.targetsByFkTargetB = targetsByFkTargetB;
    }

    
    @Column(name="dieSide")
    public Integer getDieSide() {
        return this.dieSide;
    }
    
    public void setDieSide(Integer dieSide) {
        this.dieSide = dieSide;
    }

    
    @Column(name="basePoint")
    public Integer getBasePoint() {
        return this.basePoint;
    }
    
    public void setBasePoint(Integer basePoint) {
        this.basePoint = basePoint;
    }

    
    @Column(name="baseDice")
    public Integer getBaseDice() {
        return this.baseDice;
    }
    
    public void setBaseDice(Integer baseDice) {
        this.baseDice = baseDice;
    }

    
    @Column(name="dicePerLevel")
    public Integer getDicePerLevel() {
        return this.dicePerLevel;
    }
    
    public void setDicePerLevel(Integer dicePerLevel) {
        this.dicePerLevel = dicePerLevel;
    }

    
    @Column(name="realPointsPerLevel")
    public Integer getRealPointsPerLevel() {
        return this.realPointsPerLevel;
    }
    
    public void setRealPointsPerLevel(Integer realPointsPerLevel) {
        this.realPointsPerLevel = realPointsPerLevel;
    }

    
    @Column(name="pointPerCombo")
    public Integer getPointPerCombo() {
        return this.pointPerCombo;
    }
    
    public void setPointPerCombo(Integer pointPerCombo) {
        this.pointPerCombo = pointPerCombo;
    }

    
    @Column(name="amplitude")
    public Long getAmplitude() {
        return this.amplitude;
    }
    
    public void setAmplitude(Long amplitude) {
        this.amplitude = amplitude;
    }

    
    @Column(name="multiple")
    public Long getMultiple() {
        return this.multiple;
    }
    
    public void setMultiple(Long multiple) {
        this.multiple = multiple;
    }

    
    @Column(name="chainTarget")
    public Byte getChainTarget() {
        return this.chainTarget;
    }
    
    public void setChainTarget(Byte chainTarget) {
        this.chainTarget = chainTarget;
    }

    
    @Column(name="miscValue")
    public Integer getMiscValue() {
        return this.miscValue;
    }
    
    public void setMiscValue(Integer miscValue) {
        this.miscValue = miscValue;
    }

    
    @Column(name="multiplier")
    public Integer getMultiplier() {
        return this.multiplier;
    }
    
    public void setMultiplier(Integer multiplier) {
        this.multiplier = multiplier;
    }

@ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="spelleffectitemtype", catalog="jangosworld", joinColumns = { 
        @JoinColumn(name="fk_spell", nullable=false, updatable=false), 
        @JoinColumn(name="fk_effect", nullable=false, updatable=false), 
        @JoinColumn(name="sequence", nullable=false, updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name="fk_applyOnSpell", nullable=false, updatable=false) })
    public Set<Spells> getSpellses() {
        return this.spellses;
    }
    
    public void setSpellses(Set<Spells> spellses) {
        this.spellses = spellses;
    }




}


